<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Level 300: Testing for Resiliency of EC2, RDS, and AZ on AWS Well-Architected Labs</title><link>https://wellarchitectedlabs.com/reliability/300_labs/300_testing_for_resiliency_of_ec2_rds_and_s3/</link><description>Recent content in Level 300: Testing for Resiliency of EC2, RDS, and AZ on AWS Well-Architected Labs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 24 Apr 2020 11:16:08 -0400</lastBuildDate><atom:link href="https://wellarchitectedlabs.com/reliability/300_labs/300_testing_for_resiliency_of_ec2_rds_and_s3/index.xml" rel="self" type="application/rss+xml"/><item><title>Deploy the Infrastructure and Application</title><link>https://wellarchitectedlabs.com/reliability/300_labs/300_testing_for_resiliency_of_ec2_rds_and_s3/1_deploy_infra/</link><pubDate>Fri, 24 Apr 2020 11:16:09 -0400</pubDate><guid>https://wellarchitectedlabs.com/reliability/300_labs/300_testing_for_resiliency_of_ec2_rds_and_s3/1_deploy_infra/</guid><description>You will create a multi-tier architecture using AWS and run a simple service on it. The service is a web server running on Amazon EC2 fronted by an Elastic Load Balancer reverse-proxy, with a data store on Amazon Relational Database Service (RDS).
1.1 Log into the AWS console If you are attending an in-person workshop and were provided with an AWS account by the instructor:
Click here for instructions to access your assigned AWS account: Go to https://dashboard.</description></item><item><title>Configure Execution Environment</title><link>https://wellarchitectedlabs.com/reliability/300_labs/300_testing_for_resiliency_of_ec2_rds_and_s3/2_configure_env/</link><pubDate>Fri, 24 Apr 2020 11:16:09 -0400</pubDate><guid>https://wellarchitectedlabs.com/reliability/300_labs/300_testing_for_resiliency_of_ec2_rds_and_s3/2_configure_env/</guid><description>Failure injection is a means of testing resiliency by which a specific failure type is simulated on a service and its response is assessed.
You have a choice of environments from which to execute the failure injections for this lab. Bash scripts are a good choice and can be used from a Linux command line. If you prefer Python, Java, Powershell, or C#, then instructions for these are also provided.</description></item><item><title>Preparation for Failure Injection</title><link>https://wellarchitectedlabs.com/reliability/300_labs/300_testing_for_resiliency_of_ec2_rds_and_s3/3_failure_injection_prep/</link><pubDate>Fri, 24 Apr 2020 11:16:09 -0400</pubDate><guid>https://wellarchitectedlabs.com/reliability/300_labs/300_testing_for_resiliency_of_ec2_rds_and_s3/3_failure_injection_prep/</guid><description>Failure injection (also known as chaos testing) is an effective and essential method to validate and understand the resiliency of your workload and is a recommended practice of the AWS Well-Architected Reliability Pillar . Here you will initiate various failure scenarios and assess how your system reacts.
Preparation Before testing, please prepare the following:
Region must be Ohio
We will be using the AWS Console to assess the impact of our testing</description></item><item><title>Test Resiliency Using EC2 Failure Injection</title><link>https://wellarchitectedlabs.com/reliability/300_labs/300_testing_for_resiliency_of_ec2_rds_and_s3/4_failure_injection_ec2/</link><pubDate>Fri, 24 Apr 2020 11:16:09 -0400</pubDate><guid>https://wellarchitectedlabs.com/reliability/300_labs/300_testing_for_resiliency_of_ec2_rds_and_s3/4_failure_injection_ec2/</guid><description>4.1 EC2 failure injection This failure injection will simulate a critical problem with one of the three web servers used by your service.
Before starting, view the deployment machine in the AWS Step Functions console to verify the deployment has reached the stage where you can start testing:
single region: WaitForWebApp shows completed (green) multi region: WaitForWebApp1 shows completed (green) Navigate to the EC2 console at http://console.</description></item><item><title>Test Resiliency Using RDS Failure Injection</title><link>https://wellarchitectedlabs.com/reliability/300_labs/300_testing_for_resiliency_of_ec2_rds_and_s3/5_failure_injection_rds/</link><pubDate>Fri, 24 Apr 2020 11:16:09 -0400</pubDate><guid>https://wellarchitectedlabs.com/reliability/300_labs/300_testing_for_resiliency_of_ec2_rds_and_s3/5_failure_injection_rds/</guid><description>5.1 RDS failure injection This failure injection will simulate a critical failure of the Amazon RDS DB instance.
Before starting, view the deployment machine in the AWS Step Functions console to verify the deployment has reached the stage where you can start testing:
single region: WaitForMultiAZDB shows completed (green) multi region: both WaitForRDSRRStack1 and CheckRDSRRStatus1 show completed (green) Before you initiate the failure simulation, refresh the service website several times.</description></item><item><title>Test Resiliency Using Availability Zone (AZ) Failure Injection</title><link>https://wellarchitectedlabs.com/reliability/300_labs/300_testing_for_resiliency_of_ec2_rds_and_s3/6_failure_injection_az/</link><pubDate>Fri, 24 Apr 2020 11:16:09 -0400</pubDate><guid>https://wellarchitectedlabs.com/reliability/300_labs/300_testing_for_resiliency_of_ec2_rds_and_s3/6_failure_injection_az/</guid><description>6.1 AZ failure injection This failure injection will simulate a critical problem with one of the three AWS Availability Zones (AZs) used by your service. AWS Availability Zones are powerful tools for helping build highly available applications. If an application is partitioned across AZs, companies are better isolated and protected from issues such as lightning strikes, tornadoes, earthquakes and more.
Go to the RDS Dashboard in the AWS Console at http://console.</description></item><item><title>Test Resiliency Using Failure Injection - Optional steps</title><link>https://wellarchitectedlabs.com/reliability/300_labs/300_testing_for_resiliency_of_ec2_rds_and_s3/7_failure_injection_optional/</link><pubDate>Fri, 24 Apr 2020 11:16:09 -0400</pubDate><guid>https://wellarchitectedlabs.com/reliability/300_labs/300_testing_for_resiliency_of_ec2_rds_and_s3/7_failure_injection_optional/</guid><description>The following are optional lab steps you may run to further explore failure injection
7.1 S3 failure injection Failure of S3 means that the image will not be available You may ONLY do this testing if you supplied your own websiteimage reference to an S3 bucket you control 7.1.1 Bucket name You will need to know the bucket name where your image is. For example if the websiteimage value you supplied was &amp;quot;https://s3.</description></item><item><title>Tear down this lab</title><link>https://wellarchitectedlabs.com/reliability/300_labs/300_testing_for_resiliency_of_ec2_rds_and_s3/8_cleanup/</link><pubDate>Fri, 24 Apr 2020 11:16:09 -0400</pubDate><guid>https://wellarchitectedlabs.com/reliability/300_labs/300_testing_for_resiliency_of_ec2_rds_and_s3/8_cleanup/</guid><description>If you are attending an in-person workshop and were provided with an AWS account by the instructor:
There is no need to tear down the lab. Feel free to continue exploring. Log out of your AWS account when done. If you are using your own AWS account:
You may leave these resources deployed for as long as you want. When you are ready to delete these resources, see the following instructions Remove manually provisioned resources Some resources were created by the failure simulation scripts.</description></item><item><title>Builders Guide for 300 - Testing for Resiliency of EC2, RDS, and S3</title><link>https://wellarchitectedlabs.com/reliability/300_labs/300_testing_for_resiliency_of_ec2_rds_and_s3/builders_guide/</link><pubDate>Fri, 24 Apr 2020 11:16:09 -0400</pubDate><guid>https://wellarchitectedlabs.com/reliability/300_labs/300_testing_for_resiliency_of_ec2_rds_and_s3/builders_guide/</guid><description>Introduction This guide contains the instructions for how to build the Lambda functions, the web application, and the modifications needed for the AWS CloudFormation templates' parameters as well as the JSON passed to the AWS Step Functions state machine to perform the deployment.
This guide will also give some specific instructions on the limitations of how you can deploy and what AWS regions it can be run in.
Prerequisites An AWS Account that you are able to use for tesintg, that is not used for production or other purposes.</description></item><item><title>Troubleshooting Guide for 300 - Testing for Resiliency of EC2, RDS, and S3</title><link>https://wellarchitectedlabs.com/reliability/300_labs/300_testing_for_resiliency_of_ec2_rds_and_s3/troubleshooting_guide/</link><pubDate>Fri, 24 Apr 2020 11:16:09 -0400</pubDate><guid>https://wellarchitectedlabs.com/reliability/300_labs/300_testing_for_resiliency_of_ec2_rds_and_s3/troubleshooting_guide/</guid><description>Introduction The purpose of this guide is to prepare for the expected questions and problems.
Common AWS Account Problems If running these labs on your own, you will need to use an AWS account that meets the following qualifications. If you are at a live workshop, you may have been supplied with an AWS account for the lab. If not, and you cannot remedy your account issues, please see a proctor who can help pair you with another student who does have these permissions and you can “pair lab”.</description></item><item><title>CloudFormation Parameters</title><link>https://wellarchitectedlabs.com/reliability/300_labs/300_testing_for_resiliency_of_ec2_rds_and_s3/documentation/cfn_parameters/</link><pubDate>Fri, 24 Apr 2020 11:16:09 -0400</pubDate><guid>https://wellarchitectedlabs.com/reliability/300_labs/300_testing_for_resiliency_of_ec2_rds_and_s3/documentation/cfn_parameters/</guid><description>All entries are Case-Sensitive
single region stack Parameter Default Value CreateTheAutoScalingServiceRole true CreateTheELBServiceRole true CreateTheRDSServiceRole true LambdaFunctionsBucket aws-well-architected-labs-ohio RDSLambdaKey Reliability/RDSLambda.zip VPCLambdaKey Reliability/Reliability/VPCLambda.zip WaitForStackLambdaKey Reliability/WaitForStack.zip WebAppLambdaKey Reliability/WebAppLambda.zip multi region stack Parameter Default Value CreateTheAutoScalingServiceRole true CreateTheELBServiceRole true CreateTheRDSServiceRole true DMSLambdaKey Reliability/DMSLambda.</description></item><item><title>Creating new AWS credentials for your AWS account</title><link>https://wellarchitectedlabs.com/reliability/300_labs/300_testing_for_resiliency_of_ec2_rds_and_s3/documentation/self_aws_account/</link><pubDate>Fri, 24 Apr 2020 11:16:09 -0400</pubDate><guid>https://wellarchitectedlabs.com/reliability/300_labs/300_testing_for_resiliency_of_ec2_rds_and_s3/documentation/self_aws_account/</guid><description>Use these instructions to get a AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY which you will need for the workshop
If you are using your own AWS account
These instructions are for you. Use this guide if you are running the workshop on your own, or with at an event using your own AWS account you have brought with you If you are attending an in-person workshop and were provided with an AWS account by the instructor</description></item><item><title>Delete workshop CloudFormation stacks - Multi region deployment</title><link>https://wellarchitectedlabs.com/reliability/300_labs/300_testing_for_resiliency_of_ec2_rds_and_s3/documentation/multi_region_stack_deletion/</link><pubDate>Fri, 24 Apr 2020 11:16:09 -0400</pubDate><guid>https://wellarchitectedlabs.com/reliability/300_labs/300_testing_for_resiliency_of_ec2_rds_and_s3/documentation/multi_region_stack_deletion/</guid><description>Since AWS resources deployed by AWS CloudFormation stacks may have dependencies on the stacks that were created before, then deletion must occur in the opposite order they were created Stacks with the same ordinal can be deleted at the same time. All stacks for a given ordinal must be DELETE_COMPLETE before moving on to the next ordinal The AWS Console does not let you select multiple stacks for deletion. To simultaneously delete stacks, individually select one stack at a time and click the Delete button.</description></item><item><title>Disable All Public Read Access to an S3 Bucket using AWS CLI</title><link>https://wellarchitectedlabs.com/reliability/300_labs/300_testing_for_resiliency_of_ec2_rds_and_s3/documentation/s3_with_aws_cli/</link><pubDate>Fri, 24 Apr 2020 11:16:09 -0400</pubDate><guid>https://wellarchitectedlabs.com/reliability/300_labs/300_testing_for_resiliency_of_ec2_rds_and_s3/documentation/s3_with_aws_cli/</guid><description>Disable read access to S3 bucket This command will disable public read from an entire bucket. If you want to only disable public read from one object, use the AWS Console instructions
If your S3 bucket is in a different aWS account, you will need to provide credentials for that account first.
aws ssm start-automation-execution --document-name AWS-DisableS3BucketPublicReadWrite --parameters &amp;quot;{\&amp;quot;S3BucketName\&amp;quot;: [\&amp;quot;&amp;lt;bucket-name&amp;gt;\&amp;quot;]}&amp;quot; Return to the Lab Guide , but keep this page open if you want to re-enable public read access to the bucket after testing.</description></item><item><title>Multi Region State Machine</title><link>https://wellarchitectedlabs.com/reliability/300_labs/300_testing_for_resiliency_of_ec2_rds_and_s3/documentation/multi_region_state_machine/</link><pubDate>Fri, 24 Apr 2020 11:16:09 -0400</pubDate><guid>https://wellarchitectedlabs.com/reliability/300_labs/300_testing_for_resiliency_of_ec2_rds_and_s3/documentation/multi_region_state_machine/</guid><description/></item><item><title>New Execution Input for **multi region** Deployment</title><link>https://wellarchitectedlabs.com/reliability/300_labs/300_testing_for_resiliency_of_ec2_rds_and_s3/documentation/multi_region_event_data/</link><pubDate>Fri, 24 Apr 2020 11:16:09 -0400</pubDate><guid>https://wellarchitectedlabs.com/reliability/300_labs/300_testing_for_resiliency_of_ec2_rds_and_s3/documentation/multi_region_event_data/</guid><description>On the &amp;ldquo;New execution&amp;rdquo; dialog, for &amp;ldquo;Enter an execution name&amp;rdquo; enter BuildResiliency
Then for &amp;ldquo;Input&amp;rdquo; enter JSON that will be used to supply parameter values to the Lambdas in the workflow.
multi region uses the following values
{ &amp;quot;region1&amp;quot;: { &amp;quot;log_level&amp;quot;: &amp;quot;DEBUG&amp;quot;, &amp;quot;region_name&amp;quot;: &amp;quot;us-east-2&amp;quot;, &amp;quot;secondary_region_name&amp;quot;: &amp;quot;us-west-2&amp;quot;, &amp;quot;cfn_region&amp;quot;: &amp;quot;us-east-2&amp;quot;, &amp;quot;cfn_bucket&amp;quot;: &amp;quot;aws-well-architected-labs-ohio&amp;quot;, &amp;quot;folder&amp;quot;: &amp;quot;Reliability/&amp;quot;, &amp;quot;workshop&amp;quot;: &amp;quot;300-ResiliencyofEC2RDSandS3&amp;quot;, &amp;quot;boot_bucket&amp;quot;: &amp;quot;aws-well-architected-labs-ohio&amp;quot;, &amp;quot;boot_prefix&amp;quot;: &amp;quot;Reliability/&amp;quot;, &amp;quot;websiteimage&amp;quot; : &amp;quot;https://aws-well-architected-labs-ohio.s3.us-east-2.amazonaws.com/images/Cirque_of_the_Towers.jpg&amp;quot; }, &amp;quot;region2&amp;quot;: { &amp;quot;log_level&amp;quot;: &amp;quot;DEBUG&amp;quot;, &amp;quot;region_name&amp;quot;: &amp;quot;us-west-2&amp;quot;, &amp;quot;secondary_region_name&amp;quot;: &amp;quot;us-east-2&amp;quot;, &amp;quot;cfn_region&amp;quot;: &amp;quot;us-east-2&amp;quot;, &amp;quot;cfn_bucket&amp;quot;: &amp;quot;aws-well-architected-labs-ohio&amp;quot;, &amp;quot;folder&amp;quot;: &amp;quot;Reliability/&amp;quot;, &amp;quot;workshop&amp;quot;: &amp;quot;300-ResiliencyofEC2RDSandS3&amp;quot;, &amp;quot;boot_bucket&amp;quot;: &amp;quot;aws-well-architected-labs-ohio&amp;quot;, &amp;quot;boot_prefix&amp;quot;: &amp;quot;Reliability/&amp;quot;, &amp;quot;websiteimage&amp;quot; : &amp;quot;https://aws-well-architected-labs-ohio.</description></item><item><title>Service-Linked Roles</title><link>https://wellarchitectedlabs.com/reliability/300_labs/300_testing_for_resiliency_of_ec2_rds_and_s3/documentation/service_linked_roles/</link><pubDate>Fri, 24 Apr 2020 11:16:09 -0400</pubDate><guid>https://wellarchitectedlabs.com/reliability/300_labs/300_testing_for_resiliency_of_ec2_rds_and_s3/documentation/service_linked_roles/</guid><description>Does AWS account already have service-linked roles AWS requires “service-linked” roles for AWS Auto Scaling, Elastic Load Balancing, and Amazon RDS to create the services and metrics they manage. If your AWS account has been previously been used, then these roles may already exist as they would have been automatically created for you. You will determine if any of the following three IAM service-linked roles already exists in the AWS account you are using for this workshop:</description></item><item><title>Setup AWS credentials and configuration</title><link>https://wellarchitectedlabs.com/reliability/300_labs/300_testing_for_resiliency_of_ec2_rds_and_s3/documentation/aws_credentials/</link><pubDate>Fri, 24 Apr 2020 11:16:09 -0400</pubDate><guid>https://wellarchitectedlabs.com/reliability/300_labs/300_testing_for_resiliency_of_ec2_rds_and_s3/documentation/aws_credentials/</guid><description>You will supply configuration and credentials used by the AWS CLI and AWS SDK to access your AWS account. You identified these credentials back in step 1 of the Lab Guide Choose an option Select the appropriate option for configuration of your AWS credentials:
Option 1 - Using AWS instructor supplied accounts with Linux-style environment variables Option 2 - Using AWS CLI Option 3 - Creating configuration files manually Option 4 - Using PowerShell commands for Windows Option 1 For instructor supplied AWS accounts If BOTH of the following are true then you may use Option 1</description></item><item><title>Software Install</title><link>https://wellarchitectedlabs.com/reliability/300_labs/300_testing_for_resiliency_of_ec2_rds_and_s3/documentation/software_install/</link><pubDate>Fri, 24 Apr 2020 11:16:09 -0400</pubDate><guid>https://wellarchitectedlabs.com/reliability/300_labs/300_testing_for_resiliency_of_ec2_rds_and_s3/documentation/software_install/</guid><description>This reference will help you install software necessary to setup your workshop environment
AWS CLI jq Install AWS CLI The AWS Command Line Interface (AWS CLI) is a unified tool that provides a consistent interface for interacting with all parts of AWS.
Linux This includes:
All native Linux installs
MacOS
Windows Subsystem for Linux (WSL)
Run the following command</description></item></channel></rss>