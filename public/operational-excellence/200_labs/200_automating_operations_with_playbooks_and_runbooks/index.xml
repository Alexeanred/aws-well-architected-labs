<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>200 - Automating your operations with Playbooks and Runbooks on AWS Well-Architected Labs</title><link>https://wellarchitectedlabs.com/operational-excellence/200_labs/200_automating_operations_with_playbooks_and_runbooks/</link><description>Recent content in 200 - Automating your operations with Playbooks and Runbooks on AWS Well-Architected Labs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 24 Apr 2020 11:16:08 -0400</lastBuildDate><atom:link href="https://wellarchitectedlabs.com/operational-excellence/200_labs/200_automating_operations_with_playbooks_and_runbooks/index.xml" rel="self" type="application/rss+xml"/><item><title>Deploy Lab Network Infrastructure</title><link>https://wellarchitectedlabs.com/operational-excellence/200_labs/200_automating_operations_with_playbooks_and_runbooks/1_deploy_the_lab_network_infrastructure/</link><pubDate>Fri, 24 Apr 2020 11:16:09 -0400</pubDate><guid>https://wellarchitectedlabs.com/operational-excellence/200_labs/200_automating_operations_with_playbooks_and_runbooks/1_deploy_the_lab_network_infrastructure/</guid><description>In our first sections we will build a network infrastructure for our Application using Virtual Public Cloud (VPC) , along with it&amp;rsquo;s public and private subnets across two Availability Zones , and other basic network building blocks for accessing the internet such as Internet Gateway and NAT gateway To simplify the deployment we have created a CloudFormation Template that can be deployed in your AWS account that will deploy the VPC and Application resources shown in diagram below.</description></item><item><title>Configure ECS Respository and Deploy The Application Stack</title><link>https://wellarchitectedlabs.com/operational-excellence/200_labs/200_automating_operations_with_playbooks_and_runbooks/2_configure_ecs_repository_and_deploy_application_stack/</link><pubDate>Fri, 24 Apr 2020 11:16:09 -0400</pubDate><guid>https://wellarchitectedlabs.com/operational-excellence/200_labs/200_automating_operations_with_playbooks_and_runbooks/2_configure_ecs_repository_and_deploy_application_stack/</guid><description>In this section, we are going to prepare our sample application API. Our API will be hosted inside docker containers orchestrated using Amazon Elastic Compute Service (ECS) with Application Load Balancer fronting it. The API will take 2 actions ; encrypt / decrypt. :
encrypt action will allow the user to pass on a secret message along with it&amp;rsquo;s key identifier, and it will return a secret key id that they can use to decrypt.</description></item><item><title>Simulate Application Issue</title><link>https://wellarchitectedlabs.com/operational-excellence/200_labs/200_automating_operations_with_playbooks_and_runbooks/3_simulate_application_issue/</link><pubDate>Fri, 24 Apr 2020 11:16:09 -0400</pubDate><guid>https://wellarchitectedlabs.com/operational-excellence/200_labs/200_automating_operations_with_playbooks_and_runbooks/3_simulate_application_issue/</guid><description>In this section we will simulate a performance issue to trigger an alarm notifying our the operations team about the founded issue. In our scenario today we will assume a hypothetical API response SLA of under 6 seconds, if API response takes longer than 6 seconds broader user experience is severely impacted, and our Operations team needs to response to this.
To detect this response time, we have deployed a canary monitoring using CloudWatch Synthetics to continuously check the application response time and trigger a CloudWatch alarm when response time is gone above the SLA.</description></item><item><title>Build &amp; Execute Investigative Playbook</title><link>https://wellarchitectedlabs.com/operational-excellence/200_labs/200_automating_operations_with_playbooks_and_runbooks/4_build_execute_investigative_playbook/</link><pubDate>Fri, 24 Apr 2020 11:16:09 -0400</pubDate><guid>https://wellarchitectedlabs.com/operational-excellence/200_labs/200_automating_operations_with_playbooks_and_runbooks/4_build_execute_investigative_playbook/</guid><description>In the previous section we have built a sample vpc environment with a deployed our application API running in it. We then sent through large incoming traffic to the API to simulating an increase with the Application latency driven by the application being overwhelmed. For a seasoned systems administrator / engineer, who knows the ins and outs of the application architecture and it&amp;rsquo;s general behaviour, investigating latency issue might be a relatively simple task to do.</description></item><item><title>Buiild &amp; Execute Remediation Playbook</title><link>https://wellarchitectedlabs.com/operational-excellence/200_labs/200_automating_operations_with_playbooks_and_runbooks/5_build_execute_remediation_runbook/</link><pubDate>Fri, 24 Apr 2020 11:16:09 -0400</pubDate><guid>https://wellarchitectedlabs.com/operational-excellence/200_labs/200_automating_operations_with_playbooks_and_runbooks/5_build_execute_remediation_runbook/</guid><description>Following the completion of section 4, we can complete the lab by testing the workload. We will achieve this by running a decrypt API call to our application. This will trigger a failed decrypt event which should result in our alarm being triggered and an SNS notification sent to the email address which you specified as an endpoint in the previous section.
Complete the following steps to test the system functionality:</description></item><item><title>Visibility on Operational activities.</title><link>https://wellarchitectedlabs.com/operational-excellence/200_labs/200_automating_operations_with_playbooks_and_runbooks/6_tracibility_of_your_operational_activities/</link><pubDate>Fri, 24 Apr 2020 11:16:09 -0400</pubDate><guid>https://wellarchitectedlabs.com/operational-excellence/200_labs/200_automating_operations_with_playbooks_and_runbooks/6_tracibility_of_your_operational_activities/</guid><description>Following the completion of section 4, we can complete the lab by testing the workload. We will achieve this by running a decrypt API call to our application. This will trigger a failed decrypt event which should result in our alarm being triggered and an SNS notification sent to the email address which you specified as an endpoint in the previous section.
Complete the following steps to test the system functionality:</description></item><item><title>Teardown</title><link>https://wellarchitectedlabs.com/operational-excellence/200_labs/200_automating_operations_with_playbooks_and_runbooks/7_teardown/</link><pubDate>Fri, 24 Apr 2020 11:16:09 -0400</pubDate><guid>https://wellarchitectedlabs.com/operational-excellence/200_labs/200_automating_operations_with_playbooks_and_runbooks/7_teardown/</guid><description>The following steps will remove the services which are deployed in the lab.
6.1. Remove the CloudWatch Alarm 6.1.1. From the CloudWatch console, select Alarms from the left-hand dashboard, and select the alarms which you created in the lab using the radio box.
6.1.2. From the Actions button, select Delete and confirm the alarm deletion.
6.2. Remove the CloudWatch Metric Filter From the CloudWatch console, select Log group under Logs and locate the log group which you created in the lab.</description></item></channel></rss>